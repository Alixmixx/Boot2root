link: https://www.exploit-db.com/exploits/40839

Dirty COW (Dirty copy-on-write CVE-2016-5195) is a computer security vulnerability of the Linux kernel that affected all Linux-based operating systems before 2018.

It is a local privilege escalation bug that exploits a race condition in the implementation of the copy-on-write mechanism in the kernel's memory-management subsystem.

Because of the race condition, with the right timing, a local attacker can exploit the copy-on-write mechanism to turn a read-only mapping of a file into a writable mapping

This can be used to write to otherwise read-only memory mappings, and thus increase their privileges on the system and gain root access.

Steps:
    The attacker identifies a suitable target process running on the system.
    The attacker creates a race condition by repeatedly writing to the targeted memory page while the page is being marked as read-only by the kernel.
    Simultaneously, the attacker uses the ptrace system call with PTRACE_POKEDATA to write malicious code into the targeted memory page.
    Due to the race condition, the kernel may end up updating the page's access permissions based on outdated information, allowing the attacker's modifications to persist.

In our case the steps are:

Compiling:
    The program is compiled on the machine using the following command:
    gcc -pthread dirty.c -o dirty -lcrypt
    we can then run the program using ./dirty [password]

Program execution:

File Backup:
    The program begins by attempting to create a backup of the "/etc/passwd" file in "/tmp/passwd.bak".

User Information Setup:
    The program defines a structure (struct Userinfo) to hold information about a user.
    It sets up a user (admin) with root privileges

Password Hashing and Line Generation:
    The program generates a hashed version of the provided plaintext password using the crypt() function.
    It then creates a complete password line in the format expected in the "/etc/passwd" file using the generate_passwd_line() function.

Memory Mapping:
    The program opens the "/etc/passwd" file and maps it into memory using mmap().
    This mapped memory is used to read and modify the content of the "/etc/passwd" file.

Fork and Race Condition:
    The program forks into two processes, a parent and a child.
    In the parent process, it repeatedly performs the ptrace() system call with PTRACE_POKETEXT to write the new password line into the mapped memory.
    Simultaneously, in the child process, a thread (madviseThread) repeatedly calls madvise() to create a race condition with the parent process.

Race Condition Exploitation:
    The race condition is exploited when the child process changes the memory permissions using madvise(), and the parent process tries to write to the same memory location.
    This race condition allows the parent process to write the new password line into the "/etc/passwd" file, bypassing normal file permissions.

We then end up with a new user in the /etc/passwd file with root privileges.

We can access it simply by using the su command and entering the password we set. Ssh is also possible.

We are now root on the machine.